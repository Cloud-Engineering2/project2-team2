apiVersion: apps/v1
kind: Deployment
metadata:
  name: t2-project2
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: t2-project2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: t2-project2
    spec:
      containers:
        - name: t2-project2-pod
          image: 727646470302.dkr.ecr.ap-northeast-2.amazonaws.com/t2-yeeryong:b4dded141836b54a4abe8b4a526b512d8e3205f3

---

# spring-boot-service-01.yaml
apiVersion: v1
kind: Service
metadata:
  name: t2-project2
spec:
  selector:
    app.kubernetes.io/name: t2-project2
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: tcp-8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: t2-project2-ingress
  annotations:
    # ALB 생성 관련 설정
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
#    alb.ingress.kubernetes.io/certificate-arn:  # HTTPS용 인증서 ARN (선택)
    alb.ingress.kubernetes.io/load-balancer-name: t2-eks-app-alb
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/success-codes: "200-399"
    alb.ingress.kubernetes.io/healthcheck-path: "/user/login"

    # ALB 그룹 설정
    alb.ingress.kubernetes.io/group.name: "project2"

    # 리소스 자동 할당
    kubernetes.io/ingress.class: alb
spec:
  rules:
    - host: recipe.2ryong.store # DNS 이름 (예: spring-boot.example.com)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: t2-project2
                port:
                  number: 8080
